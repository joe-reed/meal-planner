// Code generated by jsonenums -type=CategoryName; DO NOT EDIT.

package category

import (
	"encoding/json"
	"fmt"
)

var (
	_CategoryNameNameToValue = map[string]CategoryName{
		"Fruit":                   Fruit,
		"Meat":                    Meat,
		"FishAndSeafood":          FishAndSeafood,
		"FoodCupboard":            FoodCupboard,
		"Drinks":                  Drinks,
		"Chilled":                 Chilled,
		"Frozen":                  Frozen,
		"Bakery":                  Bakery,
		"Vegetables":              Vegetables,
		"TeaAndCoffee":            TeaAndCoffee,
		"AlcoholicDrinks":         AlcoholicDrinks,
		"SaucesOilsAndDressings":  SaucesOilsAndDressings,
		"PastaRiceAndNoodles":     PastaRiceAndNoodles,
		"SeedsNutsAndDriedFruits": SeedsNutsAndDriedFruits,
		"ChocolateAndSweets":      ChocolateAndSweets,
		"TinsCansAndPackets":      TinsCansAndPackets,
		"Desserts":                Desserts,
		"Dairy":                   Dairy,
		"Eggs":                    Eggs,
	}

	_CategoryNameValueToName = map[CategoryName]string{
		Fruit:                   "Fruit",
		Meat:                    "Meat",
		FishAndSeafood:          "FishAndSeafood",
		FoodCupboard:            "FoodCupboard",
		Drinks:                  "Drinks",
		Chilled:                 "Chilled",
		Frozen:                  "Frozen",
		Bakery:                  "Bakery",
		Vegetables:              "Vegetables",
		TeaAndCoffee:            "TeaAndCoffee",
		AlcoholicDrinks:         "AlcoholicDrinks",
		SaucesOilsAndDressings:  "SaucesOilsAndDressings",
		PastaRiceAndNoodles:     "PastaRiceAndNoodles",
		SeedsNutsAndDriedFruits: "SeedsNutsAndDriedFruits",
		ChocolateAndSweets:      "ChocolateAndSweets",
		TinsCansAndPackets:      "TinsCansAndPackets",
		Desserts:                "Desserts",
		Dairy:                   "Dairy",
		Eggs:                    "Eggs",
	}
)

func init() {
	var v CategoryName
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_CategoryNameNameToValue = map[string]CategoryName{
			interface{}(Fruit).(fmt.Stringer).String():                   Fruit,
			interface{}(Meat).(fmt.Stringer).String():                    Meat,
			interface{}(FishAndSeafood).(fmt.Stringer).String():          FishAndSeafood,
			interface{}(FoodCupboard).(fmt.Stringer).String():            FoodCupboard,
			interface{}(Drinks).(fmt.Stringer).String():                  Drinks,
			interface{}(Chilled).(fmt.Stringer).String():                 Chilled,
			interface{}(Frozen).(fmt.Stringer).String():                  Frozen,
			interface{}(Bakery).(fmt.Stringer).String():                  Bakery,
			interface{}(Vegetables).(fmt.Stringer).String():              Vegetables,
			interface{}(TeaAndCoffee).(fmt.Stringer).String():            TeaAndCoffee,
			interface{}(AlcoholicDrinks).(fmt.Stringer).String():         AlcoholicDrinks,
			interface{}(SaucesOilsAndDressings).(fmt.Stringer).String():  SaucesOilsAndDressings,
			interface{}(PastaRiceAndNoodles).(fmt.Stringer).String():     PastaRiceAndNoodles,
			interface{}(SeedsNutsAndDriedFruits).(fmt.Stringer).String(): SeedsNutsAndDriedFruits,
			interface{}(ChocolateAndSweets).(fmt.Stringer).String():      ChocolateAndSweets,
			interface{}(TinsCansAndPackets).(fmt.Stringer).String():      TinsCansAndPackets,
			interface{}(Desserts).(fmt.Stringer).String():                Desserts,
			interface{}(Dairy).(fmt.Stringer).String():                   Dairy,
			interface{}(Eggs).(fmt.Stringer).String():                    Eggs,
		}
	}
}

// MarshalJSON is generated so CategoryName satisfies json.Marshaler.
func (r CategoryName) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _CategoryNameValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid CategoryName: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so CategoryName satisfies json.Unmarshaler.
func (r *CategoryName) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("CategoryName should be a string, got %s", data)
	}
	v, ok := _CategoryNameNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid CategoryName %q", s)
	}
	*r = v
	return nil
}
